// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignType {
  PROJECT // GoFundMe style - one-time goal
  CREATOR // Patreon style - recurring support
  CHARITY // Pure donation/charity
}

enum CampaignCategory {
  TECHNOLOGY
  CREATIVE
  COMMUNITY
  BUSINESS
  EDUCATION
  HEALTH
  ENVIRONMENT
  OTHER
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum SubscriptionInterval {
  MONTHLY
  YEARLY
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PostType {
  TEXT // Blog post, article
  IMAGE // Photo gallery
  VIDEO // Video content
  AUDIO // Podcast, music
  MIXED // Multiple media types
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  username      String?  @unique
  avatar        String?
  bannerImage   String?
  bio           String?
  role          UserRole @default(USER)
  emailVerified Boolean  @default(false)
  githubId      String?  @unique

  // Creator profile fields
  isCreator   Boolean @default(false)
  creatorBio  String? @db.Text
  socialLinks Json? // Twitter, Instagram, YouTube, etc.

  // Stripe integration
  stripeCustomerId         String? @unique // For customers making payments
  stripeAccountId          String? @unique // For creators receiving payouts (Stripe Connect)
  stripeOnboardingComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns       Campaign[]
  donations       Donation[]
  comments        Comment[]
  campaignUpdates CampaignUpdate[]
  withdrawals     Withdrawal[]
  subscriptions   Subscription[]   @relation("Subscriber")
  subscribers     Subscription[]   @relation("Creator")
  posts           CreatorPost[]
  postLikes       PostLike[]
  postComments    PostComment[]

  // Blog relations
  articles        Article[]        @relation("AuthorArticles")
  articleComments ArticleComment[] @relation("ArticleComments")
  articleLikes    ArticleLike[]    @relation("ArticleLikes")

  // Event relations
  hostedEvents   Event[]         @relation("HostedEvents")
  eventRSVPs     EventRSVP[]     @relation("EventRSVPs")
  eventReminders EventReminder[] @relation("EventReminders")

  // Notification relations
  notifications      Notification[] @relation("Notifications")
  triggeredNotifications Notification[] @relation("NotificationActors")

  @@index([email])
  @@index([githubId])
  @@index([isCreator])
  @@index([stripeCustomerId])
  @@index([stripeAccountId])
}

model Campaign {
  id            String           @id @default(uuid())
  slug          String           @unique
  title         String
  description   String
  story         String           @db.Text
  type          CampaignType     @default(PROJECT)
  category      CampaignCategory
  goalAmount    Float
  currentAmount Float            @default(0)
  currency      String           @default("USD")
  status        CampaignStatus   @default(DRAFT)

  // Media
  coverImage String
  images     String[]
  videoUrl   String?

  // Dates
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Creator
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  // Relations
  donations       Donation[]
  rewards         Reward[]
  membershipTiers MembershipTier[]
  updates         CampaignUpdate[]
  comments        Comment[]
  withdrawals     Withdrawal[]

  @@index([slug])
  @@index([creatorId])
  @@index([status])
  @@index([category])
  @@index([type])
}

model Reward {
  id              String    @id @default(uuid())
  title           String
  description     String
  amount          Float
  deliveryDate    DateTime?
  limitedQuantity Int?
  claimedCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Relations
  donations Donation[]

  @@index([campaignId])
}

model Donation {
  id        String         @id @default(uuid())
  amount    Float
  message   String?
  anonymous Boolean        @default(false)
  status    DonationStatus @default(PENDING)

  // Payment info
  paymentMethod String?
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  donorId String
  donor   User   @relation(fields: [donorId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  rewardId String?
  reward   Reward? @relation(fields: [rewardId], references: [id], onDelete: SetNull)

  @@index([donorId])
  @@index([campaignId])
  @@index([status])
}

model CampaignUpdate {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Self-referential for replies
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@index([userId])
  @@index([campaignId])
  @@index([parentId])
}

model Withdrawal {
  id          String           @id @default(uuid())
  amount      Float
  status      WithdrawalStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  processedAt DateTime?
  notes       String?

  // Bank details (encrypted in production)
  bankAccount String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([campaignId])
  @@index([status])
}

// Patreon-style membership tiers
model MembershipTier {
  id          String               @id @default(uuid())
  name        String
  description String               @db.Text
  price       Float
  interval    SubscriptionInterval @default(MONTHLY)

  // Perks and benefits
  perks String[]

  // Access levels
  hasExclusiveContent Boolean @default(false)
  hasEarlyAccess      Boolean @default(false)
  hasPrioritySupport  Boolean @default(false)
  customPerks         Json? // Additional custom perks

  // Limits
  maxSubscribers     Int?
  currentSubscribers Int  @default(0)

  position Int     @default(0) // For ordering tiers
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  subscriptions Subscription[]

  @@index([campaignId])
  @@index([isActive])
}

// Subscription model for recurring payments
model Subscription {
  id     String             @id @default(uuid())
  status SubscriptionStatus @default(ACTIVE)

  // Payment details
  startDate       DateTime  @default(now())
  nextBillingDate DateTime
  endDate         DateTime?
  cancelledAt     DateTime?

  // Stripe/payment info
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriberId String
  subscriber   User   @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)

  creatorId String
  creator   User   @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)

  tierId String
  tier   MembershipTier @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@index([subscriberId])
  @@index([creatorId])
  @@index([tierId])
  @@index([status])
  @@index([stripeSubscriptionId])
}

// Creator exclusive posts (like Patreon posts)
model CreatorPost {
  id      String  @id @default(uuid())
  title   String
  content String  @db.Text
  excerpt String?

  // Post type (blog, video, image, audio, mixed)
  type PostType @default(TEXT)

  // Media (all optional based on type)
  images      String[]
  videoUrl    String?
  audioUrl    String? // For podcasts/music
  attachments Json? // File attachments, links, etc.

  // Access control
  isPublic      Boolean @default(false)
  minimumTierId String? // Minimum tier required to view

  // Engagement
  likeCount    Int @default(0)
  commentCount Int @default(0)

  published   Boolean   @default(true)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    PostLike[]
  comments PostComment[]

  @@index([authorId])
  @@index([isPublic])
  @@index([publishedAt])
}

// Post likes
model PostLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   CreatorPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Post comments
model PostComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   CreatorPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([createdAt])
}

// ==================== BLOG/ARTICLES ====================

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Article {
  id         String  @id @default(uuid())
  slug       String  @unique
  title      String
  excerpt    String? @db.Text
  content    String  @db.Text // Rich text HTML content
  coverImage String?

  // SEO
  metaTitle       String?
  metaDescription String?  @db.Text
  keywords        String[]

  // Status & Publishing
  status       ArticleStatus @default(DRAFT)
  publishedAt  DateTime?
  scheduledFor DateTime?

  // Stats
  viewCount Int  @default(0)
  readTime  Int? // Reading time in minutes

  // Access control
  isPublic      Boolean @default(true)
  isPremium     Boolean @default(false) // Requires subscription
  minimumTierId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation("AuthorArticles", fields: [authorId], references: [id], onDelete: Cascade)

  categories ArticleCategory[]
  tags       ArticleTag[]
  comments   ArticleComment[]
  likes      ArticleLike[]

  @@index([slug])
  @@index([authorId])
  @@index([status])
  @@index([publishedAt])
  @@index([isPremium])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String? // Hex color for UI
  icon        String? // Icon name or emoji

  articles ArticleCategory[]

  @@index([slug])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  articles ArticleTag[]

  @@index([slug])
}

// Join tables
model ArticleCategory {
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
}

model ArticleTag {
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}

model ArticleComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation("ArticleComments", fields: [userId], references: [id], onDelete: Cascade)

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Nested comments (replies)
  parentId String?
  parent   ArticleComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  ArticleComment[] @relation("CommentReplies")

  @@index([userId])
  @@index([articleId])
  @@index([parentId])
  @@index([createdAt])
}

model ArticleLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation("ArticleLikes", fields: [userId], references: [id], onDelete: Cascade)

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

// ==================== EVENTS & CALENDAR ====================

enum EventType {
  VIRTUAL // Online event
  IN_PERSON // Physical location
  HYBRID // Both
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

model Event {
  id          String  @id @default(uuid())
  title       String
  description String  @db.Text
  coverImage  String?

  // Event details
  type   EventType
  status EventStatus @default(DRAFT)

  // Date & Time
  startTime DateTime
  endTime   DateTime
  timezone  String   @default("UTC")

  // Location
  location    String? // Physical address or "Online"
  virtualLink String? // Zoom, Meet, etc.

  // Capacity & Access
  maxAttendees  Int?
  isPublic      Boolean @default(true)
  isPremium     Boolean @default(false)
  minimumTierId String?
  price         Float?  @default(0)

  // Additional info
  agenda String?  @db.Text
  tags   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hostId String
  host   User   @relation("HostedEvents", fields: [hostId], references: [id], onDelete: Cascade)

  rsvps     EventRSVP[]
  reminders EventReminder[]

  @@index([hostId])
  @@index([startTime])
  @@index([status])
  @@index([type])
  @@index([isPublic])
}

enum RSVPStatus {
  GOING
  MAYBE
  NOT_GOING
}

model EventRSVP {
  id        String     @id @default(uuid())
  status    RSVPStatus @default(GOING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  userId String
  user   User   @relation("EventRSVPs", fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([status])
}

model EventReminder {
  id         String    @id @default(uuid())
  reminderAt DateTime
  sent       Boolean   @default(false)
  sentAt     DateTime?

  userId String
  user   User   @relation("EventReminders", fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
  @@index([reminderAt])
  @@index([sent])
}

// ==================== NOTIFICATIONS ====================

enum NotificationType {
  NEW_SUBSCRIBER // Someone subscribed to your tier
  NEW_COMMENT // Someone commented on your content
  NEW_LIKE // Someone liked your content
  NEW_DONATION // Someone donated to your campaign
  EVENT_RSVP // Someone RSVPed to your event
  NEW_POST // Creator you follow posted new content
  EVENT_REMINDER // Upcoming event reminder
  SUBSCRIPTION_EXPIRING // Your subscription is expiring soon
  PAYOUT_COMPLETED // Your payout was processed
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String           @db.Text
  link      String? // URL to the relevant content
  imageUrl  String? // Optional image for the notification

  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation("Notifications", fields: [userId], references: [id], onDelete: Cascade)

  // Optional: Reference to the actor (who triggered the notification)
  actorId String?
  actor   User?   @relation("NotificationActors", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([userId, isRead])
  @@index([createdAt])
}
