// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignType {
  PROJECT // GoFundMe style - one-time goal
  CREATOR // Patreon style - recurring support
  CHARITY // Pure donation/charity
}

enum CampaignCategory {
  TECHNOLOGY
  CREATIVE
  COMMUNITY
  BUSINESS
  EDUCATION
  HEALTH
  ENVIRONMENT
  OTHER
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum SubscriptionInterval {
  MONTHLY
  YEARLY
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PostType {
  TEXT // Blog post, article
  IMAGE // Photo gallery
  VIDEO // Video content
  AUDIO // Podcast, music
  MIXED // Multiple media types
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  username      String?  @unique
  avatar        String?
  bannerImage   String?
  bio           String?
  role          UserRole @default(USER)
  emailVerified Boolean  @default(false)
  githubId      String?  @unique

  // Creator profile fields
  isCreator   Boolean @default(false)
  creatorBio  String? @db.Text
  socialLinks Json? // Twitter, Instagram, YouTube, etc.

  // Stripe integration
  stripeCustomerId         String? @unique // For customers making payments
  stripeAccountId          String? @unique // For creators receiving payouts (Stripe Connect)
  stripeOnboardingComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns       Campaign[]
  donations       Donation[]
  comments        Comment[]
  campaignUpdates CampaignUpdate[]
  withdrawals     Withdrawal[]
  subscriptions   Subscription[]   @relation("Subscriber")
  subscribers     Subscription[]   @relation("Creator")
  posts           CreatorPost[]
  postLikes       PostLike[]
  postComments    PostComment[]
  podcasts        Podcast[]

  // Blog relations
  articles        Article[]        @relation("AuthorArticles")
  articleComments ArticleComment[] @relation("ArticleComments")
  articleLikes    ArticleLike[]    @relation("ArticleLikes")

  // Event relations
  hostedEvents   Event[]         @relation("HostedEvents")
  eventRSVPs     EventRSVP[]     @relation("EventRSVPs")
  eventReminders EventReminder[] @relation("EventReminders")

  // Notification relations
  notifications          Notification[] @relation("Notifications")
  triggeredNotifications Notification[] @relation("NotificationActors")

  // Poll relations
  createdPolls Poll[]     @relation("CreatorPolls")
  pollVotes    PollVote[]

  // Goal Tracking relations
  goals Goal[] @relation("CreatorGoals")

  // Digital Downloads relations
  downloads       Download[]       @relation("CreatorDownloads")
  downloadRecords DownloadRecord[]

  // Direct Messaging relations
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  conversations1   Conversation[] @relation("Conversations1")
  conversations2   Conversation[] @relation("Conversations2")

  // Content Scheduling relations
  scheduledPosts ScheduledPost[] @relation("CreatorScheduledPosts")

  // Welcome Messages relations
  welcomeMessages WelcomeMessage[] @relation("CreatorWelcomeMessages")

  // Analytics relations
  analytics AnalyticsCache[] @relation("CreatorAnalytics")

  // Digital Products relations
  digitalProducts DigitalProduct[] @relation("CreatorDigitalProducts")
  purchases       Purchase[]

  // Referral relations
  referralCodes  ReferralCode[]  @relation("CreatorReferralCodes")
  referralUsages ReferralUsage[] @relation("UserReferralUsages")

  // Follow relations
  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")

  @@index([email])
  @@index([githubId])
  @@index([isCreator])
  @@index([stripeCustomerId])
  @@index([stripeAccountId])
}

model Campaign {
  id            String           @id @default(uuid())
  slug          String           @unique
  title         String
  description   String
  story         String           @db.Text
  type          CampaignType     @default(PROJECT)
  category      CampaignCategory
  goalAmount    Float
  currentAmount Float            @default(0)
  currency      String           @default("USD")
  status        CampaignStatus   @default(DRAFT)

  // Media
  coverImage String
  images     String[]
  videoUrl   String?

  // Dates
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Creator
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  // Relations
  donations       Donation[]
  rewards         Reward[]
  membershipTiers MembershipTier[]
  updates         CampaignUpdate[]
  comments        Comment[]
  withdrawals     Withdrawal[]

  @@index([slug])
  @@index([creatorId])
  @@index([status])
  @@index([category])
  @@index([type])
}

model Reward {
  id              String    @id @default(uuid())
  title           String
  description     String
  amount          Float
  deliveryDate    DateTime?
  limitedQuantity Int?
  claimedCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Relations
  donations Donation[]

  @@index([campaignId])
}

model Donation {
  id        String         @id @default(uuid())
  amount    Float
  message   String?
  anonymous Boolean        @default(false)
  status    DonationStatus @default(PENDING)

  // Payment info
  paymentMethod String?
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  donorId String
  donor   User   @relation(fields: [donorId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  rewardId String?
  reward   Reward? @relation(fields: [rewardId], references: [id], onDelete: SetNull)

  @@index([donorId])
  @@index([campaignId])
  @@index([status])
}

model CampaignUpdate {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Self-referential for replies
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@index([userId])
  @@index([campaignId])
  @@index([parentId])
}

model Withdrawal {
  id          String           @id @default(uuid())
  amount      Float
  status      WithdrawalStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  processedAt DateTime?
  notes       String?

  // Bank details (encrypted in production)
  bankAccount String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([campaignId])
  @@index([status])
}

// Patreon-style membership tiers
model MembershipTier {
  id          String               @id @default(uuid())
  name        String
  description String               @db.Text
  price       Float
  interval    SubscriptionInterval @default(MONTHLY)

  // Perks and benefits
  perks String[]

  // Access levels
  hasExclusiveContent Boolean @default(false)
  hasEarlyAccess      Boolean @default(false)
  hasPrioritySupport  Boolean @default(false)
  customPerks         Json? // Additional custom perks

  // Limits
  maxSubscribers     Int?
  currentSubscribers Int  @default(0)

  position Int     @default(0) // For ordering tiers
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  subscriptions   Subscription[]
  scheduledPosts  ScheduledPost[]
  welcomeMessages WelcomeMessage[]

  @@index([campaignId])
  @@index([isActive])
}

// Subscription model for recurring payments
model Subscription {
  id     String             @id @default(uuid())
  status SubscriptionStatus @default(ACTIVE)

  // Payment details
  startDate       DateTime  @default(now())
  nextBillingDate DateTime
  endDate         DateTime?
  cancelledAt     DateTime?

  // Stripe/payment info
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriberId String
  subscriber   User   @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)

  creatorId String
  creator   User   @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)

  tierId String
  tier   MembershipTier @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@index([subscriberId])
  @@index([creatorId])
  @@index([tierId])
  @@index([status])
  @@index([stripeSubscriptionId])
}

// Creator exclusive posts (like Patreon posts)
model CreatorPost {
  id      String  @id @default(uuid())
  title   String
  content String  @db.Text
  excerpt String?

  // Post type (blog, video, image, audio, mixed)
  type PostType @default(TEXT)

  // Media (all optional based on type)
  images      String[]
  videoUrl    String?
  audioUrl    String? // For podcasts/music
  attachments Json? // File attachments, links, etc.

  // Access control
  isPublic      Boolean @default(false)
  minimumTierId String? // Minimum tier required to view

  // Engagement
  likeCount    Int @default(0)
  commentCount Int @default(0)

  published   Boolean   @default(true)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    PostLike[]
  comments PostComment[]

  @@index([authorId])
  @@index([isPublic])
  @@index([publishedAt])
}

// Post likes
model PostLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   CreatorPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Post comments
model PostComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   CreatorPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([createdAt])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// ==================== BLOG/ARTICLES ====================

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Article {
  id         String  @id @default(uuid())
  slug       String  @unique
  title      String
  excerpt    String? @db.Text
  content    String  @db.Text // Rich text HTML content
  coverImage String?

  // SEO
  metaTitle       String?
  metaDescription String?  @db.Text
  keywords        String[]

  // Status & Publishing
  status       ArticleStatus @default(DRAFT)
  publishedAt  DateTime?
  scheduledFor DateTime?

  // Stats
  viewCount Int  @default(0)
  readTime  Int? // Reading time in minutes

  // Access control
  isPublic      Boolean @default(true)
  isPremium     Boolean @default(false) // Requires subscription
  minimumTierId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation("AuthorArticles", fields: [authorId], references: [id], onDelete: Cascade)

  categories ArticleCategory[]
  tags       ArticleTag[]
  comments   ArticleComment[]
  likes      ArticleLike[]

  @@index([slug])
  @@index([authorId])
  @@index([status])
  @@index([publishedAt])
  @@index([isPremium])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String? // Hex color for UI
  icon        String? // Icon name or emoji

  articles ArticleCategory[]

  @@index([slug])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  articles ArticleTag[]

  @@index([slug])
}

// Join tables
model ArticleCategory {
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
}

model ArticleTag {
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}

model ArticleComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation("ArticleComments", fields: [userId], references: [id], onDelete: Cascade)

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Nested comments (replies)
  parentId String?
  parent   ArticleComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  ArticleComment[] @relation("CommentReplies")

  @@index([userId])
  @@index([articleId])
  @@index([parentId])
  @@index([createdAt])
}

model ArticleLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation("ArticleLikes", fields: [userId], references: [id], onDelete: Cascade)

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

// ==================== EVENTS & CALENDAR ====================

enum EventType {
  VIRTUAL // Online event
  IN_PERSON // Physical location
  HYBRID // Both
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

model Event {
  id          String  @id @default(uuid())
  title       String
  description String  @db.Text
  coverImage  String?

  // Event details
  type   EventType
  status EventStatus @default(DRAFT)

  // Date & Time
  startTime DateTime
  endTime   DateTime
  timezone  String   @default("UTC")

  // Location
  location    String? // Physical address or "Online"
  virtualLink String? // Zoom, Meet, etc.

  // Capacity & Access
  maxAttendees  Int?
  isPublic      Boolean @default(true)
  isPremium     Boolean @default(false)
  minimumTierId String?
  price         Float?  @default(0)

  // Additional info
  agenda String?  @db.Text
  tags   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hostId String
  host   User   @relation("HostedEvents", fields: [hostId], references: [id], onDelete: Cascade)

  rsvps     EventRSVP[]
  reminders EventReminder[]

  @@index([hostId])
  @@index([startTime])
  @@index([status])
  @@index([type])
  @@index([isPublic])
}

enum RSVPStatus {
  GOING
  MAYBE
  NOT_GOING
}

model EventRSVP {
  id        String     @id @default(uuid())
  status    RSVPStatus @default(GOING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Ticket information
  ticketCode  String    @unique @default(uuid()) // Unique ticket code for QR
  isPaid      Boolean   @default(false) // For premium events
  paymentId   String? // Stripe payment intent ID
  checkedIn   Boolean   @default(false) // Has the user checked in?
  checkedInAt DateTime?
  checkedInBy String? // Staff member who checked them in

  userId String
  user   User   @relation("EventRSVPs", fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@index([ticketCode])
  @@index([checkedIn])
}

model EventReminder {
  id         String    @id @default(uuid())
  reminderAt DateTime
  sent       Boolean   @default(false)
  sentAt     DateTime?

  userId String
  user   User   @relation("EventReminders", fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
  @@index([reminderAt])
  @@index([sent])
}

// ==================== NOTIFICATIONS ====================

enum NotificationType {
  NEW_SUBSCRIBER // Someone subscribed to your tier
  NEW_COMMENT // Someone commented on your content
  NEW_LIKE // Someone liked your content
  NEW_DONATION // Someone donated to your campaign
  EVENT_RSVP // Someone RSVPed to your event
  NEW_POST // Creator you follow posted new content
  EVENT_REMINDER // Upcoming event reminder
  SUBSCRIPTION_EXPIRING // Your subscription is expiring soon
  PAYOUT_COMPLETED // Your payout was processed
}

model Notification {
  id       String           @id @default(uuid())
  type     NotificationType
  title    String
  message  String           @db.Text
  link     String? // URL to the relevant content
  imageUrl String? // Optional image for the notification
  metadata Json?

  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())

  userId String
  user   User   @relation("Notifications", fields: [userId], references: [id], onDelete: Cascade)

  // Optional: Reference to the actor (who triggered the notification)
  actorId String?
  actor   User?   @relation("NotificationActors", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([userId, isRead])
  @@index([createdAt])
}

// Poll System
model Poll {
  id       String   @id @default(uuid())
  question String   @db.Text
  options  String[] // JSON array of options

  // Settings
  expiresAt      DateTime?
  multipleChoice Boolean   @default(false)
  allowAddOption Boolean   @default(false)

  // Access control
  isPublic      Boolean @default(false) // If false, only supporters can vote
  minimumTierId String? // Minimum tier required to vote

  // Stats
  totalVotes Int @default(0)

  // Status
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String
  creator   User   @relation("CreatorPolls", fields: [creatorId], references: [id], onDelete: Cascade)

  votes PollVote[]

  @@index([creatorId])
  @@index([createdAt])
  @@index([isActive])
}

model PollVote {
  id          String   @id @default(uuid())
  optionIndex Int // Index of the option in the options array
  optionText  String // Store the text in case poll is deleted
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId, optionIndex]) // Allow multiple votes if multipleChoice
  @@index([userId])
  @@index([pollId])
}

// ============================================
// GOAL TRACKING SYSTEM
// ============================================

enum GoalType {
  REVENUE // Monthly revenue goal
  SUBSCRIBERS // Subscriber count goal
  CUSTOM // Custom metric goal
}

model Goal {
  id          String   @id @default(uuid())
  title       String   @db.Text
  description String?  @db.Text
  type        GoalType @default(REVENUE)

  // Target and Progress
  targetAmount  Decimal @db.Decimal(10, 2)
  currentAmount Decimal @default(0) @db.Decimal(10, 2)

  // Reward for reaching goal
  rewardDescription String? @db.Text

  // Timeline
  deadline    DateTime?
  completedAt DateTime?

  // Visibility
  isPublic Boolean @default(true)

  // Status
  isActive    Boolean  @default(true)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String
  creator   User   @relation("CreatorGoals", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([isActive])
  @@index([isCompleted])
}

// ============================================
// DIGITAL DOWNLOADS SYSTEM
// ============================================

enum FileType {
  AUDIO // MP3, WAV, etc
  VIDEO // MP4, MOV, etc
  DOCUMENT // PDF, DOCX, etc
  IMAGE // JPG, PNG, etc
  ARCHIVE // ZIP, RAR, etc
  OTHER
}

model Download {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text

  // File Info
  fileUrl  String   @db.Text
  fileName String
  fileSize BigInt // Size in bytes
  fileType FileType
  mimeType String

  // Thumbnail/Preview
  thumbnailUrl String? @db.Text

  // Access Control
  isPublic      Boolean @default(false)
  minimumTierId String? // Tier required to download

  // Stats
  downloadCount Int @default(0)

  // Status
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String
  creator   User   @relation("CreatorDownloads", fields: [creatorId], references: [id], onDelete: Cascade)

  downloads DownloadRecord[]

  @@index([creatorId])
  @@index([isActive])
  @@index([fileType])
}

model DownloadRecord {
  id           String   @id @default(uuid())
  downloadedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  downloadId String
  download   Download @relation(fields: [downloadId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([downloadId])
  @@index([downloadedAt])
}

// ============================================
// DIRECT MESSAGING SYSTEM
// ============================================

enum MessageType {
  TEXT // Regular text message
  IMAGE // Image message
  FILE // File attachment
  BROADCAST // Broadcast to all supporters
}

model Message {
  id      String      @id @default(uuid())
  content String      @db.Text
  type    MessageType @default(TEXT)

  // Attachments
  attachmentUrl  String? @db.Text
  attachmentName String?

  // Read status
  isRead Boolean   @default(false)
  readAt DateTime?

  // Broadcast
  isBroadcast Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sender
  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  // Receiver (null if broadcast)
  receiverId String?
  receiver   User?   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([isRead])
}

model Conversation {
  id            String   @id @default(uuid())
  lastMessageAt DateTime @default(now())

  // Participants
  user1Id String
  user1   User   @relation("Conversations1", fields: [user1Id], references: [id], onDelete: Cascade)

  user2Id String
  user2   User   @relation("Conversations2", fields: [user2Id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([lastMessageAt])
}

// Scheduled Posts - Content Scheduling System
model ScheduledPost {
  id         String   @id @default(uuid())
  title      String   @db.Text
  content    String   @db.Text
  excerpt    String?  @db.Text
  coverImage String?  @db.Text
  mediaUrls  String[] // Array of media URLs

  // Scheduling
  scheduledFor DateTime // When to publish
  published    Boolean   @default(false)
  publishedAt  DateTime?

  // Access Control
  isPublic      Boolean         @default(true)
  minimumTierId String?
  minimumTier   MembershipTier? @relation(fields: [minimumTierId], references: [id], onDelete: SetNull)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation("CreatorScheduledPosts", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([scheduledFor])
  @@index([published])
}

// Welcome Messages - Auto-send to new subscribers
model WelcomeMessage {
  id      String @id @default(uuid())
  subject String @db.Text
  content String @db.Text

  // Targeting
  tierId String? // If null, applies to all tiers
  tier   MembershipTier? @relation(fields: [tierId], references: [id], onDelete: Cascade)

  // Settings
  isActive Boolean @default(true)
  delay    Int     @default(0) // Minutes to wait before sending (0 = immediate)

  // Stats
  sentCount Int @default(0)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation("CreatorWelcomeMessages", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([tierId])
  @@index([isActive])
}

// Analytics Cache - Store computed analytics for performance
model AnalyticsCache {
  id String @id @default(uuid())

  // Time period
  date  DateTime @db.Date
  month Int // YYYYMM format (e.g., 202501)
  year  Int

  // Metrics
  revenue             Decimal @default(0) @db.Decimal(10, 2)
  newSubscribers      Int     @default(0)
  canceledSubscribers Int     @default(0)
  activeSubscribers   Int     @default(0)
  totalSubscribers    Int     @default(0)
  postsPublished      Int     @default(0)
  pollsCreated        Int     @default(0)
  eventsCreated       Int     @default(0)
  totalViews          Int     @default(0)
  totalLikes          Int     @default(0)
  totalComments       Int     @default(0)
  totalDownloads      Int     @default(0)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation("CreatorAnalytics", fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([creatorId, date])
  @@index([creatorId, month])
  @@index([creatorId, year])
  @@index([date])
}

enum ProductType {
  EBOOK // Digital books, PDFs
  COURSE // Online courses, tutorials
  TEMPLATE // Design templates, code templates
  AUDIO // Music, audio files
  VIDEO // Video content
  SOFTWARE // Apps, plugins, tools
  ASSET // 3D models, graphics, etc
  OTHER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ReferralRewardType {
  SUBSCRIPTION_CREDIT
  DISCOUNT
  BONUS_CONTENT
  NONE
}

model DigitalProduct {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  price       Float // Price in USD

  // Product Details
  productType ProductType
  fileUrl     String?     @db.Text // File download URL
  fileSize    BigInt? // Size in bytes

  // Media
  coverImage String? @db.Text
  previewUrl String? @db.Text // Demo/preview file

  // Content
  features     String[] // List of features/what's included
  requirements String[] // System requirements or prerequisites

  // Sales Info
  salesCount Int   @default(0)
  revenue    Float @default(0)

  // Status
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation("CreatorDigitalProducts", fields: [creatorId], references: [id], onDelete: Cascade)

  purchases Purchase[]

  @@index([creatorId])
  @@index([productType])
  @@index([isActive])
  @@index([isFeatured])
}

model Purchase {
  id     String         @id @default(uuid())
  amount Float // Purchase amount
  status PurchaseStatus @default(PENDING)

  // Payment Info
  paymentMethod String?
  transactionId String? @unique

  // Download tracking
  downloadCount  Int       @default(0)
  lastDownloadAt DateTime?

  // Timestamps
  purchasedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   DigitalProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([status])
  @@index([purchasedAt])
}

model ReferralCode {
  id          String             @id @default(uuid())
  code        String             @unique
  description String?
  rewardType  ReferralRewardType @default(SUBSCRIPTION_CREDIT)
  usageLimit  Int?
  usageCount  Int                @default(0)
  expiresAt   DateTime?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  creatorId String
  creator   User   @relation("CreatorReferralCodes", fields: [creatorId], references: [id], onDelete: Cascade)

  usages ReferralUsage[]

  @@index([creatorId])
}

model ReferralUsage {
  id             String       @id @default(uuid())
  referralCodeId String
  referralCode   ReferralCode @relation(fields: [referralCodeId], references: [id], onDelete: Cascade)

  referredUserId String?
  referredUser   User?        @relation("UserReferralUsages", fields: [referredUserId], references: [id], onDelete: SetNull)

  referredEmail  String?
  context        String?
  createdAt      DateTime     @default(now())

  @@index([referralCodeId])
  @@index([referredUserId])
}

enum PodcastStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EpisodeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Podcast {
  id              String        @id @default(uuid())
  title           String
  description     String?
  category        String        @default("Technology")
  language        String        @default("English")
  coverImage      String?
  spotifyShowUrl  String?
  spotifyShowId   String?
  externalFeedUrl String?
  status          PodcastStatus @default(DRAFT)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  episodes PodcastEpisode[]

  @@index([creatorId])
  @@index([status])
  @@index([createdAt])
  @@index([spotifyShowId])
}

model PodcastEpisode {
  id                String        @id @default(uuid())
  title             String
  description       String?
  episodeNumber     Int
  duration          Int? // Duration in seconds
  audioUrl          String?
  spotifyEpisodeUrl String?
  spotifyEpisodeId  String?
  status            EpisodeStatus @default(DRAFT)

  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  podcastId String
  podcast   Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@index([podcastId])
  @@index([episodeNumber])
  @@index([status])
  @@index([publishedAt])
  @@index([spotifyEpisodeId])
}
